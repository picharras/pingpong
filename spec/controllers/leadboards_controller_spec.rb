require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe LeadboardsController, type: :controller do

  before do
    User.delete_all
    @user = User.create!(email: 'pichi@gmail.com', password: 'pass1234567')

    allow(request.env['warden']).to receive(:authenticate!).and_return(@user)
    allow(controller).to receive(:current_user).and_return(@user)
    sign_in @user
    request.host = 'localhost'
  end

  # This should return the minimal set of attributes required to create a valid
  # Leadboard. As you add validations to Leadboard, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {
      user_id: @user.id,
      score: 10,
      games: 2
    }
  }

  let(:invalid_attributes) {
    {
      score: 'foo',
      games: 'bar'
    }
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # LeadboardsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe 'GET #index' do
    it 'returns a success response' do
      leadboard = Leadboard.create! valid_attributes
      get :index, {}
      expect(response).to be_success
    end
  end

  describe 'GET #show' do
    it 'returns a success response' do
      leadboard = Leadboard.create! valid_attributes
      get :show, {:id => leadboard.to_param}
      expect(response).to be_success
    end
  end
end
